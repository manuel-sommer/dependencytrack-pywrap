class Vulnerability(object):
    def get_all_vulnerabilities(self, pageSize=100):
        vulnerability_list = list()
        pageNumber = 1
        response = self.session.get(self.apicall + "/v1/vulnerability", params={
                                    'pageSize': pageSize, 'pageNumber': pageNumber})
        for vul in range(0, len(response.json())):
            vulnerability_list.append(response.json()[vul - 1])
        while len(response.json()) == pageSize:
            pageNumber += 1
            response = self.session.get(self.apicall + "/v1/vulnerability", params={
                                        'pageSize': pageSize, 'pageNumber': pageNumber})
            for vul in range(0, len(response.json())):
                vulnerability_list.append(response.json()[vul - 1])
        if response.status_code == 200:
            return vulnerability_list
        else:
            return (f"Unable to find any vulnerabilities, {response.status_code}")

    def get_vulnerability(self, source, vuln):
        """
        this method returns a specific vulnerability
        source:string(to be filled later)
        vuln:string(to be filled later)
        """
        response = self.session.get(
            self.apicall + f"/v1/vulnerability/source/{source}/vuln/{vuln}")
        if response.status_code == 200:
            return response.json()
        else:
            if response.status_code == 401:
                return (f"Unauthorized , {response.status_code}")
            else:
                return (f"The vulnerability could not be found, {response.status_code}")

    def get_component_vulnerability(self, uuid, suppressed=False, pageSize=100):
        """ Returns a list of all vulnerabilities for a specific component.
        uuid:
        suppressed: optionally includes suppressed vulnerabilities
        """
        vulnerability_list = list()
        pageNumber = 1
        response = self.session.get(self.apicall + f"/v1/vulnerability/component/{uuid}?suppressed={suppressed}", params={
                                    "pageSize": pageSize, "pageNumber": pageNumber})
        for vul in range(0, len(response.json())):
            vulnerability_list.append(response.json()[vul - 1])
        while len(response.json()) == pageSize:
            pageNumber += 1
            response = self.session.get(self.apicall + f"/v1/vulnerability/component/{uuid}?suppressed={suppressed}", params={
                                        'pageSize': pageSize, 'pageNumber': pageNumber})
            for vul in range(0, len(response.json())):
                vulnerability_list.append(response.json()[vul - 1])
        if response.status_code == 200:
            return vulnerability_list
        else:
            if response.status_code == 401:
                return (f"Unauthorized, {response.status_code}")
            elif response.status_code == 403:
                return (f"Access to the specified component is forbidden, {response.status_code}")
            else:
                return (f"The component could not be found, {response.status_code}")

    def get_project_vulnerability(self, uuid, suppressed=False, pageSize=100):
        """ Returns a list of all vulnerabilities for a specific project.
        uuid:
        suppressed: optionally includes suppressed vulnerabilities(boolean) """
        vulnerability_list = list()
        pageNumber = 1
        response = self.session.get(self.apicall + f"/v1/vulnerability/project/{uuid}?suppressed={suppressed}", params={
                                    "pageSize": pageSize, "pageNumber": pageNumber})
        for vul in range(0, len(response.json())):
            vulnerability_list.append(response.json()[vul - 1])
        while len(response.json()) == pageSize:
            pageNumber += 1
            response = self.session.get(self.apicall + f"/v1/vulnerability/project/{uuid}?suppressed={suppressed}", params={
                                        'pageSize': pageSize, 'pageNumber': pageNumber})
            for vul in range(0, len(response.json())):
                vulnerability_list.append(response.json()[vul - 1])
        if response.status_code == 200:
            return vulnerability_list
        else:
            if response.status_code == 401:
                return (f"Unauthorized, {response.status_code}")
            elif response.status_code == 403:
                return (f"Access to the specified project is forbidden, {response.status_code}")
            else:
                return (f"The project could not be found, {response.status_code}")

    def get_vulnerability_uuid(self, uuid):
        """ returns a specific vulnerability
        uuid: The UUID of the vulnerability """
        response = self.session.get(self.apicall + f"/v1/vulnerability/{uuid}")
        if response.status_code == 200:
            return response.json()
        else:
            if response.status_code == 401:
                return (f"Unauthorized, {response.status_code}")
            else:
                return (f"The vulnerability could not be found, {response.status_code}")

    def get_affected_project(self, source, vuln):
        """ Returns a list of all projects affected by a specific vulnerability
        source:
        vuln: """
        response = self.session.get(
            self.apicall + f"/v1/vulnerability/source/{source}/vuln/{vuln}/projects")
        if response.status_code == 200:
            return response.json()
        else:
            if response.status_code == 401:
                return (f"Unauthorized, {response.status_code}")
            else:
                return (f"The vulnerability could not be found, {response.status_code}")
    # TODO: POST,POST /v1/vulnerability
    # TODO: DELETE, POST  /v1/vulnerability/source/{source}/vuln/{vulnId}/component/{component}, DELETE, POST /v1/vulnerability/{uuid}/component/{component}
